{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","inp","submit","handleChange","bind","handleSubmit","handleRetry","e","this","setState","target","value","className","onSubmit","type","href","onChange","react","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAkEeA,E,kDA9DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAK,GACLC,QAAQ,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBARJ,E,gDAUnB,SAAaG,GACTC,KAAKC,SAAS,CACVR,IAAKM,EAAEG,OAAOC,U,0BAGtB,WACIH,KAAKC,SAAS,CACVP,QAAQ,M,yBAGhB,WACIM,KAAKC,SAAS,CACVR,IAAK,GACLC,QAAQ,M,oBAGhB,WACI,OAAIM,KAAKR,MAAME,OAEP,sBAAKU,UAAU,MAAf,UACI,sBAAKA,UAAW,aAAhB,UACI,mBAAGA,UAAW,OAAd,qDAA4DJ,KAAKR,MAAMC,OACvE,sBAAMY,SAAUL,KAAKF,YAAaM,UAAW,iBAA7C,SACI,uBAAOE,KAAM,SAAUF,UAAW,MAAOD,MAAK,eAGtD,sBAAKC,UAAW,UAAhB,iCAC6B,mBAAGG,KAAM,iCAAT,+BAMjC,sBAAKH,UAAU,MAAf,UACI,qBAAKA,UAAW,YAAhB,SACI,uBAAMC,SAAUL,KAAKH,aAAcO,UAAW,iBAA9C,UACI,wBAAOA,UAAW,kBAAlB,6CACI,uBAAOE,KAAM,OAAQF,UAAW,MAAOD,MAAOH,KAAKR,MAAMC,IAAKe,SAAUR,KAAKL,eADjF,WAIA,uBAAOW,KAAM,SAAUF,UAAW,MAAOD,MAAK,uCAAkCH,KAAKR,MAAMC,IAA7C,aAGtD,sBAAKW,UAAW,UAAhB,iCAC6B,mBAAGG,KAAM,iCAAT,mC,GAvD/BE,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da358535.chunk.js","sourcesContent":["import react from 'react'\nimport './App.css';\n\nclass App extends react.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            inp: \"\",\n            submit: false\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleRetry = this.handleRetry.bind(this)\n    }\n    handleChange(e) {\n        this.setState({\n            inp: e.target.value\n        })\n    }\n    handleSubmit(){\n        this.setState({\n            submit: true\n        })\n    }\n    handleRetry(){\n        this.setState({\n            inp: '',\n            submit: false\n        })\n    }\n    render(){\n        if (this.state.submit){\n            return (\n                <div className=\"App\">\n                    <div className={\"retry-cont\"}>\n                        <p className={\"text\"}>{`Yes, you are wasting your time on ${this.state.inp}`}</p>\n                        <form onSubmit={this.handleRetry} className={\"main-form text\"}>\n                            <input type={\"submit\"} className={\"inp\"} value={`Retry`}/>\n                        </form>\n                    </div>\n                    <div className={\"credits\"}>\n                        made with &lt;3 by &nbsp;<a href={\"https://github.com/minelarka14\"}>minelarka14</a>\n                    </div>\n                </div>\n            );\n        }else{\n            return (\n                <div className=\"App\">\n                    <div className={\"main-cont\"}>\n                        <form onSubmit={this.handleSubmit} className={\"main-form text\"}>\n                            <label className={\"form-child text\"}>Am I wasting my time on &nbsp;&nbsp;\n                                <input type={\"text\"} className={\"inp\"} value={this.state.inp} onChange={this.handleChange}/>\n                                &nbsp;?\n                            </label>\n                            <input type={\"submit\"} className={\"inp\"} value={`Are you wasting your time on ${this.state.inp} ?`}/>\n                        </form>\n                    </div>\n                    <div className={\"credits\"}>\n                        made with &lt;3 by &nbsp;<a href={\"https://github.com/minelarka14\"}>minelarka14</a>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}